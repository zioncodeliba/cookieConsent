(function(){

// Helper functions
function getCookie(name) {
    var match = document.cookie.match(new RegExp('(^| )' + name + '=([^;]+)'));
    return match ? match[2] : null;
}

function setCookie(name, value, days) {
    var expires = '';
    if (days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = '; expires=' + date.toUTCString();
    }
    document.cookie = name + '=' + (value || '') + expires + '; path=/';
}

function deleteCookie(name) {
    document.cookie = name + '=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;';
}

function currentState() {
    var state = {};
    
    // Get categories from WPCCM global or use defaults
    var categories = [];
    if (typeof WPCCM !== 'undefined' && WPCCM.categories && Array.isArray(WPCCM.categories)) {
        categories = WPCCM.categories;
    } else {
        // Fallback to default categories
        categories = [
            {key: 'necessary', required: true},
            {key: 'functional', required: false},
            {key: 'performance', required: false},
            {key: 'analytics', required: false},
            {key: 'advertisement', required: false},
            {key: 'others', required: false}
        ];
    }
    
    categories.forEach(function(cat) {
        if (cat.enabled !== false) { // Include if not explicitly disabled
            if (cat.required) {
                state[cat.key] = true; // Always true for required
            } else {
                state[cat.key] = getCookie('consent_' + cat.key) === '1';
            }
        }
    });
    
    return state;
}

function storeState(state) {
    var days = (WPCCM && WPCCM.options && WPCCM.options.cookie_days) || 180;
    
    // Store state for all defined categories
    Object.keys(state).forEach(function(key) {
        setCookie('consent_' + key, state[key] ? '1' : '0', days);
    });
}

function storeNewState(state) {
    var days = (WPCCM && WPCCM.options && WPCCM.options.cookie_days) || 180;
    
    // Store state for all defined categories
    Object.keys(state).forEach(function(key) {
        setCookie('consent_' + key, state[key] ? '1' : '0', days);
    });
}

function isResolved(state) {
    // Check if user has made a consent decision
    return getCookie('consent_necessary') !== null || getCookie('consent_analytics') !== null;
}

function activateDeferredScripts() {
    var scripts = document.querySelectorAll('script[type="text/plain"][data-consent]');
    var state = currentState();
    
    scripts.forEach(function(script) {
        var category = script.getAttribute('data-consent');
        if (state[category]) {
            var newScript = document.createElement('script');
            
            // Copy attributes
            Array.from(script.attributes).forEach(function(attr) {
                if (attr.name !== 'type' && attr.name !== 'data-consent') {
                    newScript.setAttribute(attr.name, attr.value);
                }
            });
            
            // Handle src vs inline
            var dataSrc = script.getAttribute('data-src');
            if (dataSrc) {
                newScript.src = dataSrc;
            } else {
                newScript.innerHTML = script.innerHTML;
            }
            
            script.parentNode.replaceChild(newScript, script);
        }
    });
}

function purgeOnReject() {
    var options = {};
    if (typeof WPCCM !== 'undefined' && WPCCM && WPCCM.options) {
        options = WPCCM.options;
    }
    var cookiesToPurge = (options.purge && options.purge.cookies) || ['_ga', '_ga_*', '_gid', '_fbp', '_hjSessionUser'];
    
    cookiesToPurge.forEach(function(cookieName) {
        if (cookieName.includes('*')) {
            // Handle wildcard cookies
            var prefix = cookieName.replace('*', '');
            var cookies = document.cookie.split(';');
            cookies.forEach(function(cookie) {
                var name = cookie.split('=')[0].trim();
                if (name.startsWith(prefix)) {
                    deleteCookie(name);
                }
            });
        } else {
            deleteCookie(cookieName);
        }
    });
    
    // Clear localStorage items
    try { 
        localStorage.removeItem('_ga'); 
        localStorage.removeItem('_gid');
    } catch(e) {}
}

function generateCategoryToggles(texts, cookiesByCategory) {
    // Get categories from WPCCM global or use defaults
    var categories = [];
    
    if (typeof WPCCM !== 'undefined' && WPCCM.categories && Array.isArray(WPCCM.categories)) {
        categories = WPCCM.categories;
    } else {
        // Fallback to default categories
        categories = [
            {key: 'necessary', name: texts.necessary || 'Necessary', required: true, description: 'Essential cookies required for basic site functionality.', enabled: true},
            {key: 'functional', name: texts.functional || 'Functional', required: false, description: 'Cookies that enhance your experience by remembering your preferences.', enabled: true},
            {key: 'performance', name: texts.performance || 'Performance', required: false, description: 'Cookies that help us optimize our website performance.', enabled: true},
            {key: 'analytics', name: texts.analytics || 'Analytics', required: false, description: 'Cookies that help us understand how visitors interact with our website.', enabled: true},
            {key: 'advertisement', name: texts.advertisement || 'Advertisement', required: false, description: 'Cookies used to deliver personalized advertisements.', enabled: true},
            {key: 'others', name: texts.others || 'Others', required: false, description: 'Other cookies that do not fit into the above categories.', enabled: true}
        ];
    }
    
    cookiesByCategory = cookiesByCategory || {};
    
    var html = '';
    categories.forEach(function(cat) {
        // Skip disabled categories
        if (cat.enabled === false) {
            return;
        }
        
        var checked = cat.required ? 'checked' : '';
        var disabled = cat.required ? 'disabled' : '';
        var statusText = cat.required ? (texts.always_enabled || 'Always Enabled') : (texts.disabled || 'Disabled');
        
        // Generate cookies list for this category
        var cookiesHtml = '';
        var categoryData = cookiesByCategory[cat.key];
        if (categoryData && categoryData.cookies && categoryData.cookies.length > 0) {
            cookiesHtml = '<div class="wpccm-cookies-list" style="margin-top: 10px; font-size: 12px; color: #666;">' +
                '<strong>' + (texts.cookies_in_category || 'Cookies in this category:') + '</strong><br>' +
                '<div class="wpccm-cookie-tags">';
            
            categoryData.cookies.forEach(function(cookieName) {
                cookiesHtml += '<span class="wpccm-cookie-tag">' + escapeHtml(cookieName) + '</span>';
            });
            
            cookiesHtml += '</div></div>';
        }
        
        html += '<div class="wpccm-category">' +
            '<div class="wpccm-category-header">' +
            '<div class="wpccm-category-info">' +
            '<h4>' + escapeHtml(cat.name) + '</h4>' +
            '<p>' + escapeHtml(cat.description) + '</p>' +
            cookiesHtml +
            '</div>' +
            '<div class="wpccm-category-toggle">' +
            '<span class="wpccm-toggle-status">' + statusText + '</span>' +
            '<label class="wpccm-switch">' +
            '<input type="checkbox" data-category="' + escapeHtml(cat.key) + '" ' + checked + ' ' + disabled + '>' +
            '<span class="wpccm-slider"></span>' +
            '</label>' +
            '</div>' +
            '</div>' +
            '</div>';
    });
    
    return html;
}

function renderBanner(){
    var root = document.getElementById('wpccm-banner-root');
    if (!root) return;
    
    // Safe access to WPCCM global
    if (typeof WPCCM === 'undefined') {
        console.warn('WPCCM global not found');
        return;
    }
    
    var o = (WPCCM && WPCCM.options) ? WPCCM.options : {};
    var b = o.banner || {};
    var texts = (WPCCM && WPCCM.texts) ? WPCCM.texts : {};

    // Detect language for RTL support
    var isHebrew = (WPCCM && WPCCM.texts && WPCCM.texts.functional_required && WPCCM.texts.functional_required.indexOf('נדרש') > -1);
    var langAttr = isHebrew ? ' data-lang="he"' : '';

    // Create the small top banner first
    var topBannerHtml = ''+
    '<div class="wpccm-top-banner"' + langAttr + ' role="dialog" aria-live="polite">\n' +
    ' <div class="wpccm-top-content">\n' +
    ' <span class="wpccm-top-text">' + (b.description || texts.cookie_description || 'We use cookies on our website to give you the most relevant experience by remembering your preferences and repeat visits. By clicking "Accept All", you consent to the use of ALL the cookies.') + '</span>\n' +
    ' <div class="wpccm-top-actions">\n' +
    ' <button class="wpccm-btn-settings" id="wpccm-settings-btn">' + (texts.cookie_settings || 'Cookie Settings') + '</button>\n' +
    ' <button class="wpccm-btn-accept" id="wpccm-accept-all-btn">' + (b.accept_text || texts.accept_all || 'Accept All') + '</button>\n' +
    ' </div>\n' +
    ' </div>\n' +
    '</div>';

    // Load cookies by category and then render modal
    loadCookiesByCategory(function(cookiesByCategory) {
        // Create the detailed modal (hidden by default)
        var modalHtml = ''+
        '<div class="wpccm-modal" id="wpccm-modal" style="display: none;" role="dialog" aria-modal="true">\n' +
        ' <div class="wpccm-modal-overlay"></div>\n' +
        ' <div class="wpccm-modal-content">\n' +
        ' <div class="wpccm-modal-header">\n' +
        ' <h2>' + (texts.privacy_overview || 'Privacy Overview') + '</h2>\n' +
        ' <button class="wpccm-modal-close" aria-label="Close">&times;</button>\n' +
        ' </div>\n' +
        ' <div class="wpccm-modal-body">\n' +
        ' <p>' + (texts.cookie_description || 'This website uses cookies to improve your experience while you navigate through the website. Out of these, the cookies that are categorized as necessary are stored on your browser as they are essential for the working of basic functionalities of the website...') + '</p>\n' +
        ' <div class="wpccm-categories">\n' +
        generateCategoryToggles(texts, cookiesByCategory) +
        ' </div>\n' +
        ' </div>\n' +
        ' <div class="wpccm-modal-footer">\n' +
        ' <button class="wpccm-btn-save-accept" id="wpccm-save-accept-btn">' + (texts.save_accept || 'SAVE & ACCEPT') + '</button>\n' +
        ' </div>\n' +
        ' </div>\n' +
        '</div>';

        root.innerHTML = topBannerHtml + modalHtml;

        // Pre-fill checkboxes if user has a previous state
        var s = currentState();
        var checkboxes = root.querySelectorAll('input[data-category]');
        checkboxes.forEach(function(checkbox) {
            var category = checkbox.getAttribute('data-category');
            if (s[category] !== undefined) {
                checkbox.checked = s[category];
                updateToggleStatus(checkbox, texts);
            }
        });

        // Add change listeners to update status text
        checkboxes.forEach(function(checkbox) {
            checkbox.addEventListener('change', function() {
                updateToggleStatus(this, texts);
            });
        });

        // Add click handlers
        var settingsBtn = document.getElementById('wpccm-settings-btn');
        var acceptAllBtn = document.getElementById('wpccm-accept-all-btn');
        var saveAcceptBtn = document.getElementById('wpccm-save-accept-btn');
        var modalCloseBtn = root.querySelector('.wpccm-modal-close');
        var modalOverlay = root.querySelector('.wpccm-modal-overlay');
        var modal = document.getElementById('wpccm-modal');
        
        if(settingsBtn) settingsBtn.addEventListener('click', function(){ 
            modal.style.display = 'flex';
            document.body.style.overflow = 'hidden';
        });
        
        if(acceptAllBtn) acceptAllBtn.addEventListener('click', function(){ acceptAll(); });
        if(saveAcceptBtn) saveAcceptBtn.addEventListener('click', function(){ saveChoices(); });
        
        if(modalCloseBtn) modalCloseBtn.addEventListener('click', function(){ 
            modal.style.display = 'none';
            document.body.style.overflow = '';
        });
        
        if(modalOverlay) modalOverlay.addEventListener('click', function(){ 
            modal.style.display = 'none';
            document.body.style.overflow = '';
        });
    });
}

function updateToggleStatus(checkbox, texts) {
    var statusSpan = checkbox.closest('.wpccm-category-toggle').querySelector('.wpccm-toggle-status');
    if (statusSpan) {
        if (checkbox.disabled) {
            statusSpan.textContent = texts.always_enabled || 'Always Enabled';
        } else {
            statusSpan.textContent = checkbox.checked ? (texts.enabled || 'Enabled') : (texts.disabled || 'Disabled');
        }
    }
}

function acceptAll() {
    var newState = {};
    
    // Get categories from WPCCM global or use defaults
    var categories = [];
    if (typeof WPCCM !== 'undefined' && WPCCM.categories && Array.isArray(WPCCM.categories)) {
        categories = WPCCM.categories;
    } else {
        // Fallback to default categories
        categories = [
            {key: 'necessary', enabled: true},
            {key: 'functional', enabled: true},
            {key: 'performance', enabled: true},
            {key: 'analytics', enabled: true},
            {key: 'advertisement', enabled: true},
            {key: 'others', enabled: true}
        ];
    }
    
    categories.forEach(function(cat) {
        if (cat.enabled !== false) {
            newState[cat.key] = true;
        }
    });
    
    storeNewState(newState);
    activateDeferredScripts();
    hideBanner();
}

function saveChoices() {
    var root = document.getElementById('wpccm-banner-root');
    var checkboxes = root.querySelectorAll('input[data-category]');
    var newState = {};
    
    checkboxes.forEach(function(checkbox) {
        var category = checkbox.getAttribute('data-category');
        newState[category] = checkbox.checked;
    });
    
    // Ensure required categories are always true
    var categories = [];
    if (typeof WPCCM !== 'undefined' && WPCCM.categories && Array.isArray(WPCCM.categories)) {
        categories = WPCCM.categories;
    }
    
    categories.forEach(function(cat) {
        if (cat.required && cat.enabled !== false) {
            newState[cat.key] = true;
        }
    });
    
    storeNewState(newState);
    
    // Purge cookies if some categories are rejected
    var hasRejected = Object.keys(newState).some(function(key) {
        var category = categories.find(function(cat) { return cat.key === key; });
        return !category || (!category.required && !newState[key]);
    });
    
    if (hasRejected) purgeOnReject();
    activateDeferredScripts();
    hideBanner();
}

function hideBanner() {
    var root = document.getElementById('wpccm-banner-root');
    if (root) root.innerHTML = '';
    document.body.style.overflow = '';
}

function loadCookiesByCategory(callback) {
    // Check if AJAX URL is available
    if (typeof WPCCM === 'undefined' || !WPCCM.ajaxUrl) {
        console.warn('WPCCM AJAX URL not found, fallback to empty cookies');
        callback({});
        return;
    }
    
    var xhr = new XMLHttpRequest();
    xhr.open('POST', WPCCM.ajaxUrl, true);
    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
    
    xhr.onload = function() {
        if (xhr.status === 200) {
            try {
                var response = JSON.parse(xhr.responseText);
                if (response.success && response.data) {
                    callback(response.data);
                } else {
                    console.warn('Failed to load cookies by category:', response);
                    callback({});
                }
            } catch (e) {
                console.warn('Error parsing cookies response:', e);
                callback({});
            }
        } else {
            console.warn('Failed to load cookies, status:', xhr.status);
            callback({});
        }
    };
    
    xhr.onerror = function() {
        console.warn('Network error loading cookies');
        callback({});
    };
    
    // Send simple request - server will use purge list instead of current browser cookies
    xhr.send('action=wpccm_get_current_cookies_by_category');
}

function escapeHtml(text) {
    var div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
}

function init(){
    var s = currentState();
    //console.log('WPCCM Banner Debug:', {
        state: s,
        isResolved: isResolved(s),
        consent_necessary: getCookie('consent_necessary'),
        consent_analytics: getCookie('consent_analytics')
    });
    
    if (!isResolved(s)) {
        //console.log('Rendering banner...');
        renderBanner();
    } else {
        //console.log('Banner already resolved, activating scripts...');
        activateDeferredScripts();
    }
}

// Public API
window.WPCCM_API = {
    grantAll: function(){ 
        acceptAll();
    },
    denyAll: function(){ 
        var newState = {};
        
        // Get categories from WPCCM global or use defaults
        var categories = [];
        if (typeof WPCCM !== 'undefined' && WPCCM.categories && Array.isArray(WPCCM.categories)) {
            categories = WPCCM.categories;
        } else {
            // Fallback to default categories
            categories = [
                {key: 'necessary', required: true},
                {key: 'functional', required: false},
                {key: 'performance', required: false},
                {key: 'analytics', required: false},
                {key: 'advertisement', required: false},
                {key: 'others', required: false}
            ];
        }
        
        categories.forEach(function(cat) {
            if (cat.enabled !== false) { // Include if not explicitly disabled
                newState[cat.key] = cat.required; // Only required categories are enabled
            }
        });
        
        storeNewState(newState);
        purgeOnReject(); 
    },
    resetConsent: function() {
        // Delete all consent cookies
        var categories = ['necessary', 'functional', 'performance', 'analytics', 'advertisement', 'others'];
        categories.forEach(function(cat) {
            deleteCookie('consent_' + cat);
        });
        //console.log('Consent reset - banner should appear on next page load');
        location.reload();
    },
    showBanner: function() {
        //console.log('Force showing banner...');
        renderBanner();
    },
    debugState: function() {
        var s = currentState();
        //console.log('Current banner state debug:', {
            state: s,
            isResolved: isResolved(s),
            allCookies: document.cookie,
            bannerContainer: document.getElementById('wpccm-banner-root')
        });
    }
};
        
        // Get categories from WPCCM global or use defaults
        var categories = [];
        if (typeof WPCCM !== 'undefined' && WPCCM.categories && Array.isArray(WPCCM.categories)) {
            categories = WPCCM.categories;
        } else {
            // Fallback to default categories
            categories = [
                {key: 'necessary', required: true},
                {key: 'functional', required: false},
                {key: 'performance', required: false},
                {key: 'analytics', required: false},
                {key: 'advertisement', required: false},
                {key: 'others', required: false}
            ];
        }
        
        categories.forEach(function(cat) {
            if (cat.enabled !== false) {
                newState[cat.key] = cat.required || false;
            }
        });
        
        storeNewState(newState);
        purgeOnReject(); 
    },
    state: currentState
};

// Wait for both DOM and other scripts to load
function safeInit() {
    // Only initialize if we're not in admin area
    if (document.body && document.body.classList.contains('wp-admin')) {
        return;
    }
    
    // Don't run during AJAX requests
    if (window.location.href.indexOf('admin-ajax.php') !== -1) {
        return;
    }
    
    // Wait a bit more to ensure other scripts have loaded
    setTimeout(function() {
        init();
    }, 200); // Increased delay
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', safeInit);
} else {
    safeInit();
}
})();