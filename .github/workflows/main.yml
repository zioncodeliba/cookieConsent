name: Build & Publish WPCCM (FTP)

on:
  push:
    tags:
      - "v*.*.*"   # הפעלה אוטומטית על תגיות גרסה, למשל v1.0.1
  workflow_dispatch:

permissions:
  contents: read

env:
  PLUGIN_SLUG: wp-cookie-consent-manager
  MAIN_FILE: wp-cookie-consent-manager.php
  PUBLIC_BASE_URL: https://digitalpay.co.il/ck_updates     # ככה ייבנה ה-download_url
  REMOTE_DIR: /public_html/ck_updates                      # יעד ב-FTP (התאם אם צריך)

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # קובע גרסה: קודם מה-tag (v1.2.3), ואם אין – מהכותרת בקובץ הפלאגין
      - name: Determine version
        id: ver
        run: |
          TAG="${GITHUB_REF_NAME:-}"
          if [[ -n "$TAG" ]]; then
            VERSION="${TAG#v}"
          else
            # נסה לקרוא מהכותרת בקובץ הראשי
            VERSION=$(awk -F': ' '/^\* Version:/ {print $2; exit}' ${PLUGIN_SLUG}/${MAIN_FILE})
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version is: $VERSION"

      # נכין תיקיית dist ונארוז כך שה-ROOT של ה-ZIP הוא תיקיית הפלאגין (קריטי לעדכון)
      - name: Prepare dist
        run: |
          mkdir -p dist/${PLUGIN_SLUG}
          if [ -d "${PLUGIN_SLUG}" ]; then
            rsync -a ${PLUGIN_SLUG}/ dist/${PLUGIN_SLUG}/ --exclude ".git" --exclude ".github" --exclude "dist"
          else
            # אם הריפו עצמו הוא הפלאגין, נעטוף לתיקייה בשם ה-slug
            rsync -a ./ dist/${PLUGIN_SLUG}/ --exclude ".git" --exclude ".github" --exclude "dist"
          fi

      - name: Create ZIP
        id: zip
        run: |
          cd dist
          ZIP_NAME="${PLUGIN_SLUG}-${{ steps.ver.outputs.version }}.zip"
          zip -r "$ZIP_NAME" "${PLUGIN_SLUG}" -x "*.DS_Store"
          echo "zip_name=$ZIP_NAME" >> $GITHUB_OUTPUT
          ls -lah

      - name: Build update JSON
        id: json
        run: |
          VERSION="${{ steps.ver.outputs.version }}"
          ZIP_NAME="${{ steps.zip.outputs.zip_name }}"
          DOWNLOAD_URL="${PUBLIC_BASE_URL}/${ZIP_NAME}"

          # שינוי לוג/צ'יינג'לוג: ברירת מחדל מתגית, אחרת טקסט סטנדרטי
          CHANGELOG=$(git for-each-ref refs/tags/v${VERSION} --format='%(contents)' | head -c 2000)
          [ -z "$CHANGELOG" ] && CHANGELOG="Release ${VERSION}"

          cat > dist/wpccm.json <<JSON
          {
            "name": "WP Cookie Consent Manager",
            "slug": "${PLUGIN_SLUG}/${MAIN_FILE}",
            "version": "${VERSION}",
            "author": "Your Name",
            "author_homepage": "https://digitalpay.co.il",
            "download_url": "${DOWNLOAD_URL}",
            "requires": "5.8",
            "tested": "6.6",
            "requires_php": "7.4",
            "homepage": "https://digitalpay.co.il",
            "sections": {
              "description": "Auto-built release ${VERSION}",
              "changelog": "${CHANGELOG//\"/\\\"}"
            }
          }
          JSON

          echo "json_name=wpccm.json" >> $GITHUB_OUTPUT
          cat dist/wpccm.json

      # פריסה ב-FTP: נעלה את קבצי dist/ (רק ה-ZIP וה-JSON) לתיקייה REMOTE_DIR
      - name: FTP Deploy (ZIP)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.4
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: ftp
          port: ${{ secrets.FTP_PORT || 21 }}
          local-dir: dist/
          server-dir: ${{ env.REMOTE_DIR }}/
          # שומרים רק על שתי הקבצים, לא מוחקים קבצים אחרים שם
          # ה-action הזה מסנכרן directory; נשאיר ברירת מחדל (לא delete)
